// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/teacher"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Teacher is the model entity for the Teacher schema.
type Teacher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeacherQuery when eager-loading is set.
	Edges        TeacherEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TeacherEdges holds the relations/edges for other nodes in the graph.
type TeacherEdges struct {
	// Classes holds the value of the classes edge.
	Classes []*Class `json:"classes,omitempty"`
	// Courses holds the value of the courses edge.
	Courses []*Course `json:"courses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e TeacherEdges) ClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[0] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// CoursesOrErr returns the Courses value or an error if the edge
// was not loaded in eager-loading.
func (e TeacherEdges) CoursesOrErr() ([]*Course, error) {
	if e.loadedTypes[1] {
		return e.Courses, nil
	}
	return nil, &NotLoadedError{edge: "courses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Teacher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case teacher.FieldID:
			values[i] = new(sql.NullInt64)
		case teacher.FieldName, teacher.FieldEmail, teacher.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Teacher fields.
func (_m *Teacher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teacher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case teacher.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case teacher.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case teacher.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Teacher.
// This includes values selected through modifiers, order, etc.
func (_m *Teacher) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryClasses queries the "classes" edge of the Teacher entity.
func (_m *Teacher) QueryClasses() *ClassQuery {
	return NewTeacherClient(_m.config).QueryClasses(_m)
}

// QueryCourses queries the "courses" edge of the Teacher entity.
func (_m *Teacher) QueryCourses() *CourseQuery {
	return NewTeacherClient(_m.config).QueryCourses(_m)
}

// Update returns a builder for updating this Teacher.
// Note that you need to call Teacher.Unwrap() before calling this method if this Teacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Teacher) Update() *TeacherUpdateOne {
	return NewTeacherClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Teacher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Teacher) Unwrap() *Teacher {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Teacher is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Teacher) String() string {
	var builder strings.Builder
	builder.WriteString("Teacher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(_m.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Teachers is a parsable slice of Teacher.
type Teachers []*Teacher
