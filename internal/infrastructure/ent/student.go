// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/class"
	"Runlet/internal/infrastructure/ent/student"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Student is the model entity for the Student schema.
type Student struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ClassID holds the value of the "class_id" field.
	ClassID int `json:"class_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudentQuery when eager-loading is set.
	Edges        StudentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StudentEdges holds the relations/edges for other nodes in the graph.
type StudentEdges struct {
	// Attempts holds the value of the attempts edge.
	Attempts []*Attempt `json:"attempts,omitempty"`
	// Problems holds the value of the problems edge.
	Problems []*Problem `json:"problems,omitempty"`
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AttemptsOrErr returns the Attempts value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) AttemptsOrErr() ([]*Attempt, error) {
	if e.loadedTypes[0] {
		return e.Attempts, nil
	}
	return nil, &NotLoadedError{edge: "attempts"}
}

// ProblemsOrErr returns the Problems value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) ProblemsOrErr() ([]*Problem, error) {
	if e.loadedTypes[1] {
		return e.Problems, nil
	}
	return nil, &NotLoadedError{edge: "problems"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) ClassOrErr() (*Class, error) {
	if e.Class != nil {
		return e.Class, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: class.Label}
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Student) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case student.FieldID, student.FieldClassID:
			values[i] = new(sql.NullInt64)
		case student.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Student fields.
func (_m *Student) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case student.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case student.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case student.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				_m.ClassID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Student.
// This includes values selected through modifiers, order, etc.
func (_m *Student) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAttempts queries the "attempts" edge of the Student entity.
func (_m *Student) QueryAttempts() *AttemptQuery {
	return NewStudentClient(_m.config).QueryAttempts(_m)
}

// QueryProblems queries the "problems" edge of the Student entity.
func (_m *Student) QueryProblems() *ProblemQuery {
	return NewStudentClient(_m.config).QueryProblems(_m)
}

// QueryClass queries the "class" edge of the Student entity.
func (_m *Student) QueryClass() *ClassQuery {
	return NewStudentClient(_m.config).QueryClass(_m)
}

// Update returns a builder for updating this Student.
// Note that you need to call Student.Unwrap() before calling this method if this Student
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Student) Update() *StudentUpdateOne {
	return NewStudentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Student entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Student) Unwrap() *Student {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Student is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Student) String() string {
	var builder strings.Builder
	builder.WriteString("Student(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("class_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ClassID))
	builder.WriteByte(')')
	return builder.String()
}

// Students is a parsable slice of Student.
type Students []*Student
