// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/attempt"
	"Runlet/internal/infrastructure/ent/problem"
	"Runlet/internal/infrastructure/ent/student"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Attempt is the model entity for the Attempt schema.
type Attempt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint `json:"amount,omitempty"`
	// Done holds the value of the "done" field.
	Done bool `json:"done,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID int `json:"student_id,omitempty"`
	// ProblemID holds the value of the "problem_id" field.
	ProblemID int `json:"problem_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttemptQuery when eager-loading is set.
	Edges        AttemptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AttemptEdges holds the relations/edges for other nodes in the graph.
type AttemptEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// Problem holds the value of the problem edge.
	Problem *Problem `json:"problem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttemptEdges) StudentOrErr() (*Student, error) {
	if e.Student != nil {
		return e.Student, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: student.Label}
	}
	return nil, &NotLoadedError{edge: "student"}
}

// ProblemOrErr returns the Problem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttemptEdges) ProblemOrErr() (*Problem, error) {
	if e.Problem != nil {
		return e.Problem, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: problem.Label}
	}
	return nil, &NotLoadedError{edge: "problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attempt.FieldDone:
			values[i] = new(sql.NullBool)
		case attempt.FieldID, attempt.FieldAmount, attempt.FieldStudentID, attempt.FieldProblemID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attempt fields.
func (_m *Attempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attempt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case attempt.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				_m.Amount = uint(value.Int64)
			}
		case attempt.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				_m.Done = value.Bool
			}
		case attempt.FieldStudentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				_m.StudentID = int(value.Int64)
			}
		case attempt.FieldProblemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field problem_id", values[i])
			} else if value.Valid {
				_m.ProblemID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attempt.
// This includes values selected through modifiers, order, etc.
func (_m *Attempt) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStudent queries the "student" edge of the Attempt entity.
func (_m *Attempt) QueryStudent() *StudentQuery {
	return NewAttemptClient(_m.config).QueryStudent(_m)
}

// QueryProblem queries the "problem" edge of the Attempt entity.
func (_m *Attempt) QueryProblem() *ProblemQuery {
	return NewAttemptClient(_m.config).QueryProblem(_m)
}

// Update returns a builder for updating this Attempt.
// Note that you need to call Attempt.Unwrap() before calling this method if this Attempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Attempt) Update() *AttemptUpdateOne {
	return NewAttemptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Attempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Attempt) Unwrap() *Attempt {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attempt is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Attempt) String() string {
	var builder strings.Builder
	builder.WriteString("Attempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("done=")
	builder.WriteString(fmt.Sprintf("%v", _m.Done))
	builder.WriteString(", ")
	builder.WriteString("student_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StudentID))
	builder.WriteString(", ")
	builder.WriteString("problem_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProblemID))
	builder.WriteByte(')')
	return builder.String()
}

// Attempts is a parsable slice of Attempt.
type Attempts []*Attempt
