// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/class"
	"Runlet/internal/infrastructure/ent/course"
	"Runlet/internal/infrastructure/ent/predicate"
	"Runlet/internal/infrastructure/ent/problem"
	"Runlet/internal/infrastructure/ent/teacher"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (_u *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *CourseUpdate) SetTitle(v string) *CourseUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableTitle(v *string) *CourseUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CourseUpdate) SetDescription(v string) *CourseUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableDescription(v *string) *CourseUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (_u *CourseUpdate) AddProblemIDs(ids ...int) *CourseUpdate {
	_u.mutation.AddProblemIDs(ids...)
	return _u
}

// AddProblems adds the "problems" edges to the Problem entity.
func (_u *CourseUpdate) AddProblems(v ...*Problem) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProblemIDs(ids...)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (_u *CourseUpdate) AddClassIDs(ids ...int) *CourseUpdate {
	_u.mutation.AddClassIDs(ids...)
	return _u
}

// AddClasses adds the "classes" edges to the Class entity.
func (_u *CourseUpdate) AddClasses(v ...*Class) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddClassIDs(ids...)
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (_u *CourseUpdate) AddTeacherIDs(ids ...int) *CourseUpdate {
	_u.mutation.AddTeacherIDs(ids...)
	return _u
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (_u *CourseUpdate) AddTeachers(v ...*Teacher) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeacherIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_u *CourseUpdate) Mutation() *CourseMutation {
	return _u.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (_u *CourseUpdate) ClearProblems() *CourseUpdate {
	_u.mutation.ClearProblems()
	return _u
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (_u *CourseUpdate) RemoveProblemIDs(ids ...int) *CourseUpdate {
	_u.mutation.RemoveProblemIDs(ids...)
	return _u
}

// RemoveProblems removes "problems" edges to Problem entities.
func (_u *CourseUpdate) RemoveProblems(v ...*Problem) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProblemIDs(ids...)
}

// ClearClasses clears all "classes" edges to the Class entity.
func (_u *CourseUpdate) ClearClasses() *CourseUpdate {
	_u.mutation.ClearClasses()
	return _u
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (_u *CourseUpdate) RemoveClassIDs(ids ...int) *CourseUpdate {
	_u.mutation.RemoveClassIDs(ids...)
	return _u
}

// RemoveClasses removes "classes" edges to Class entities.
func (_u *CourseUpdate) RemoveClasses(v ...*Class) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveClassIDs(ids...)
}

// ClearTeachers clears all "teachers" edges to the Teacher entity.
func (_u *CourseUpdate) ClearTeachers() *CourseUpdate {
	_u.mutation.ClearTeachers()
	return _u
}

// RemoveTeacherIDs removes the "teachers" edge to Teacher entities by IDs.
func (_u *CourseUpdate) RemoveTeacherIDs(ids ...int) *CourseUpdate {
	_u.mutation.RemoveTeacherIDs(ids...)
	return _u
}

// RemoveTeachers removes "teachers" edges to Teacher entities.
func (_u *CourseUpdate) RemoveTeachers(v ...*Teacher) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeacherIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CourseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CourseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ProblemsTable,
			Columns: []string{course.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !_u.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ProblemsTable,
			Columns: []string{course.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ProblemsTable,
			Columns: []string{course.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.ClassesTable,
			Columns: course.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedClassesIDs(); len(nodes) > 0 && !_u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.ClassesTable,
			Columns: course.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.ClassesTable,
			Columns: course.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !_u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetTitle sets the "title" field.
func (_u *CourseUpdateOne) SetTitle(v string) *CourseUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableTitle(v *string) *CourseUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CourseUpdateOne) SetDescription(v string) *CourseUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableDescription(v *string) *CourseUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (_u *CourseUpdateOne) AddProblemIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.AddProblemIDs(ids...)
	return _u
}

// AddProblems adds the "problems" edges to the Problem entity.
func (_u *CourseUpdateOne) AddProblems(v ...*Problem) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProblemIDs(ids...)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (_u *CourseUpdateOne) AddClassIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.AddClassIDs(ids...)
	return _u
}

// AddClasses adds the "classes" edges to the Class entity.
func (_u *CourseUpdateOne) AddClasses(v ...*Class) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddClassIDs(ids...)
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (_u *CourseUpdateOne) AddTeacherIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.AddTeacherIDs(ids...)
	return _u
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (_u *CourseUpdateOne) AddTeachers(v ...*Teacher) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeacherIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_u *CourseUpdateOne) Mutation() *CourseMutation {
	return _u.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (_u *CourseUpdateOne) ClearProblems() *CourseUpdateOne {
	_u.mutation.ClearProblems()
	return _u
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (_u *CourseUpdateOne) RemoveProblemIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.RemoveProblemIDs(ids...)
	return _u
}

// RemoveProblems removes "problems" edges to Problem entities.
func (_u *CourseUpdateOne) RemoveProblems(v ...*Problem) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProblemIDs(ids...)
}

// ClearClasses clears all "classes" edges to the Class entity.
func (_u *CourseUpdateOne) ClearClasses() *CourseUpdateOne {
	_u.mutation.ClearClasses()
	return _u
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (_u *CourseUpdateOne) RemoveClassIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.RemoveClassIDs(ids...)
	return _u
}

// RemoveClasses removes "classes" edges to Class entities.
func (_u *CourseUpdateOne) RemoveClasses(v ...*Class) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveClassIDs(ids...)
}

// ClearTeachers clears all "teachers" edges to the Teacher entity.
func (_u *CourseUpdateOne) ClearTeachers() *CourseUpdateOne {
	_u.mutation.ClearTeachers()
	return _u
}

// RemoveTeacherIDs removes the "teachers" edge to Teacher entities by IDs.
func (_u *CourseUpdateOne) RemoveTeacherIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.RemoveTeacherIDs(ids...)
	return _u
}

// RemoveTeachers removes "teachers" edges to Teacher entities.
func (_u *CourseUpdateOne) RemoveTeachers(v ...*Teacher) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeacherIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (_u *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Course entity.
func (_u *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ProblemsTable,
			Columns: []string{course.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !_u.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ProblemsTable,
			Columns: []string{course.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ProblemsTable,
			Columns: []string{course.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.ClassesTable,
			Columns: course.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedClassesIDs(); len(nodes) > 0 && !_u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.ClassesTable,
			Columns: course.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.ClassesTable,
			Columns: course.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !_u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
