// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/class"
	"Runlet/internal/infrastructure/ent/course"
	"Runlet/internal/infrastructure/ent/predicate"
	"Runlet/internal/infrastructure/ent/student"
	"Runlet/internal/infrastructure/ent/teacher"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (_u *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_u *ClassUpdate) AddStudentIDs(ids ...int) *ClassUpdate {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the Student entity.
func (_u *ClassUpdate) AddStudents(v ...*Student) *ClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (_u *ClassUpdate) AddTeacherIDs(ids ...int) *ClassUpdate {
	_u.mutation.AddTeacherIDs(ids...)
	return _u
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (_u *ClassUpdate) AddTeachers(v ...*Teacher) *ClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeacherIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (_u *ClassUpdate) AddCourseIDs(ids ...int) *ClassUpdate {
	_u.mutation.AddCourseIDs(ids...)
	return _u
}

// AddCourses adds the "courses" edges to the Course entity.
func (_u *ClassUpdate) AddCourses(v ...*Course) *ClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCourseIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (_u *ClassUpdate) Mutation() *ClassMutation {
	return _u.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (_u *ClassUpdate) ClearStudents() *ClassUpdate {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (_u *ClassUpdate) RemoveStudentIDs(ids ...int) *ClassUpdate {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to Student entities.
func (_u *ClassUpdate) RemoveStudents(v ...*Student) *ClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// ClearTeachers clears all "teachers" edges to the Teacher entity.
func (_u *ClassUpdate) ClearTeachers() *ClassUpdate {
	_u.mutation.ClearTeachers()
	return _u
}

// RemoveTeacherIDs removes the "teachers" edge to Teacher entities by IDs.
func (_u *ClassUpdate) RemoveTeacherIDs(ids ...int) *ClassUpdate {
	_u.mutation.RemoveTeacherIDs(ids...)
	return _u
}

// RemoveTeachers removes "teachers" edges to Teacher entities.
func (_u *ClassUpdate) RemoveTeachers(v ...*Teacher) *ClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeacherIDs(ids...)
}

// ClearCourses clears all "courses" edges to the Course entity.
func (_u *ClassUpdate) ClearCourses() *ClassUpdate {
	_u.mutation.ClearCourses()
	return _u
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (_u *ClassUpdate) RemoveCourseIDs(ids ...int) *ClassUpdate {
	_u.mutation.RemoveCourseIDs(ids...)
	return _u
}

// RemoveCourses removes "courses" edges to Course entities.
func (_u *ClassUpdate) RemoveCourses(v ...*Course) *ClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCourseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ClassUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClassUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ClassUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.TeachersTable,
			Columns: class.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !_u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.TeachersTable,
			Columns: class.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.TeachersTable,
			Columns: class.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.CoursesTable,
			Columns: class.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !_u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.CoursesTable,
			Columns: class.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.CoursesTable,
			Columns: class.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_u *ClassUpdateOne) AddStudentIDs(ids ...int) *ClassUpdateOne {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the Student entity.
func (_u *ClassUpdateOne) AddStudents(v ...*Student) *ClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (_u *ClassUpdateOne) AddTeacherIDs(ids ...int) *ClassUpdateOne {
	_u.mutation.AddTeacherIDs(ids...)
	return _u
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (_u *ClassUpdateOne) AddTeachers(v ...*Teacher) *ClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeacherIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (_u *ClassUpdateOne) AddCourseIDs(ids ...int) *ClassUpdateOne {
	_u.mutation.AddCourseIDs(ids...)
	return _u
}

// AddCourses adds the "courses" edges to the Course entity.
func (_u *ClassUpdateOne) AddCourses(v ...*Course) *ClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCourseIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (_u *ClassUpdateOne) Mutation() *ClassMutation {
	return _u.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (_u *ClassUpdateOne) ClearStudents() *ClassUpdateOne {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (_u *ClassUpdateOne) RemoveStudentIDs(ids ...int) *ClassUpdateOne {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to Student entities.
func (_u *ClassUpdateOne) RemoveStudents(v ...*Student) *ClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// ClearTeachers clears all "teachers" edges to the Teacher entity.
func (_u *ClassUpdateOne) ClearTeachers() *ClassUpdateOne {
	_u.mutation.ClearTeachers()
	return _u
}

// RemoveTeacherIDs removes the "teachers" edge to Teacher entities by IDs.
func (_u *ClassUpdateOne) RemoveTeacherIDs(ids ...int) *ClassUpdateOne {
	_u.mutation.RemoveTeacherIDs(ids...)
	return _u
}

// RemoveTeachers removes "teachers" edges to Teacher entities.
func (_u *ClassUpdateOne) RemoveTeachers(v ...*Teacher) *ClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeacherIDs(ids...)
}

// ClearCourses clears all "courses" edges to the Course entity.
func (_u *ClassUpdateOne) ClearCourses() *ClassUpdateOne {
	_u.mutation.ClearCourses()
	return _u
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (_u *ClassUpdateOne) RemoveCourseIDs(ids ...int) *ClassUpdateOne {
	_u.mutation.RemoveCourseIDs(ids...)
	return _u
}

// RemoveCourses removes "courses" edges to Course entities.
func (_u *ClassUpdateOne) RemoveCourses(v ...*Course) *ClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCourseIDs(ids...)
}

// Where appends a list predicates to the ClassUpdate builder.
func (_u *ClassUpdateOne) Where(ps ...predicate.Class) *ClassUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Class entity.
func (_u *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.TeachersTable,
			Columns: class.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !_u.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.TeachersTable,
			Columns: class.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.TeachersTable,
			Columns: class.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.CoursesTable,
			Columns: class.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !_u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.CoursesTable,
			Columns: class.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.CoursesTable,
			Columns: class.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
