// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/attempt"
	"Runlet/internal/infrastructure/ent/course"
	"Runlet/internal/infrastructure/ent/predicate"
	"Runlet/internal/infrastructure/ent/problem"
	"Runlet/internal/infrastructure/ent/student"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemUpdate is the builder for updating Problem entities.
type ProblemUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemMutation
}

// Where appends a list predicates to the ProblemUpdate builder.
func (_u *ProblemUpdate) Where(ps ...predicate.Problem) *ProblemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ProblemUpdate) SetTitle(v string) *ProblemUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ProblemUpdate) SetNillableTitle(v *string) *ProblemUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProblemUpdate) SetDescription(v string) *ProblemUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProblemUpdate) SetNillableDescription(v *string) *ProblemUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetCourseID sets the "course_id" field.
func (_u *ProblemUpdate) SetCourseID(v int) *ProblemUpdate {
	_u.mutation.SetCourseID(v)
	return _u
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (_u *ProblemUpdate) SetNillableCourseID(v *int) *ProblemUpdate {
	if v != nil {
		_u.SetCourseID(*v)
	}
	return _u
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *ProblemUpdate) SetCourse(v *Course) *ProblemUpdate {
	return _u.SetCourseID(v.ID)
}

// AddAttemptIDs adds the "attempts" edge to the Attempt entity by IDs.
func (_u *ProblemUpdate) AddAttemptIDs(ids ...int) *ProblemUpdate {
	_u.mutation.AddAttemptIDs(ids...)
	return _u
}

// AddAttempts adds the "attempts" edges to the Attempt entity.
func (_u *ProblemUpdate) AddAttempts(v ...*Attempt) *ProblemUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAttemptIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_u *ProblemUpdate) AddStudentIDs(ids ...int) *ProblemUpdate {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the Student entity.
func (_u *ProblemUpdate) AddStudents(v ...*Student) *ProblemUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (_u *ProblemUpdate) Mutation() *ProblemMutation {
	return _u.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *ProblemUpdate) ClearCourse() *ProblemUpdate {
	_u.mutation.ClearCourse()
	return _u
}

// ClearAttempts clears all "attempts" edges to the Attempt entity.
func (_u *ProblemUpdate) ClearAttempts() *ProblemUpdate {
	_u.mutation.ClearAttempts()
	return _u
}

// RemoveAttemptIDs removes the "attempts" edge to Attempt entities by IDs.
func (_u *ProblemUpdate) RemoveAttemptIDs(ids ...int) *ProblemUpdate {
	_u.mutation.RemoveAttemptIDs(ids...)
	return _u
}

// RemoveAttempts removes "attempts" edges to Attempt entities.
func (_u *ProblemUpdate) RemoveAttempts(v ...*Attempt) *ProblemUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAttemptIDs(ids...)
}

// ClearStudents clears all "students" edges to the Student entity.
func (_u *ProblemUpdate) ClearStudents() *ProblemUpdate {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (_u *ProblemUpdate) RemoveStudentIDs(ids ...int) *ProblemUpdate {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to Student entities.
func (_u *ProblemUpdate) RemoveStudents(v ...*Student) *ProblemUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProblemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProblemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProblemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProblemUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := problem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Problem.title": %w`, err)}
		}
	}
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.course"`)
	}
	return nil
}

func (_u *ProblemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(problem.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CourseTable,
			Columns: []string{problem.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CourseTable,
			Columns: []string{problem.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AttemptsTable,
			Columns: []string{problem.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !_u.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AttemptsTable,
			Columns: []string{problem.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AttemptsTable,
			Columns: []string{problem.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   problem.StudentsTable,
			Columns: problem.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   problem.StudentsTable,
			Columns: problem.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   problem.StudentsTable,
			Columns: problem.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProblemUpdateOne is the builder for updating a single Problem entity.
type ProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemMutation
}

// SetTitle sets the "title" field.
func (_u *ProblemUpdateOne) SetTitle(v string) *ProblemUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ProblemUpdateOne) SetNillableTitle(v *string) *ProblemUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProblemUpdateOne) SetDescription(v string) *ProblemUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProblemUpdateOne) SetNillableDescription(v *string) *ProblemUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetCourseID sets the "course_id" field.
func (_u *ProblemUpdateOne) SetCourseID(v int) *ProblemUpdateOne {
	_u.mutation.SetCourseID(v)
	return _u
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (_u *ProblemUpdateOne) SetNillableCourseID(v *int) *ProblemUpdateOne {
	if v != nil {
		_u.SetCourseID(*v)
	}
	return _u
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *ProblemUpdateOne) SetCourse(v *Course) *ProblemUpdateOne {
	return _u.SetCourseID(v.ID)
}

// AddAttemptIDs adds the "attempts" edge to the Attempt entity by IDs.
func (_u *ProblemUpdateOne) AddAttemptIDs(ids ...int) *ProblemUpdateOne {
	_u.mutation.AddAttemptIDs(ids...)
	return _u
}

// AddAttempts adds the "attempts" edges to the Attempt entity.
func (_u *ProblemUpdateOne) AddAttempts(v ...*Attempt) *ProblemUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAttemptIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_u *ProblemUpdateOne) AddStudentIDs(ids ...int) *ProblemUpdateOne {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the Student entity.
func (_u *ProblemUpdateOne) AddStudents(v ...*Student) *ProblemUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (_u *ProblemUpdateOne) Mutation() *ProblemMutation {
	return _u.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *ProblemUpdateOne) ClearCourse() *ProblemUpdateOne {
	_u.mutation.ClearCourse()
	return _u
}

// ClearAttempts clears all "attempts" edges to the Attempt entity.
func (_u *ProblemUpdateOne) ClearAttempts() *ProblemUpdateOne {
	_u.mutation.ClearAttempts()
	return _u
}

// RemoveAttemptIDs removes the "attempts" edge to Attempt entities by IDs.
func (_u *ProblemUpdateOne) RemoveAttemptIDs(ids ...int) *ProblemUpdateOne {
	_u.mutation.RemoveAttemptIDs(ids...)
	return _u
}

// RemoveAttempts removes "attempts" edges to Attempt entities.
func (_u *ProblemUpdateOne) RemoveAttempts(v ...*Attempt) *ProblemUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAttemptIDs(ids...)
}

// ClearStudents clears all "students" edges to the Student entity.
func (_u *ProblemUpdateOne) ClearStudents() *ProblemUpdateOne {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (_u *ProblemUpdateOne) RemoveStudentIDs(ids ...int) *ProblemUpdateOne {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to Student entities.
func (_u *ProblemUpdateOne) RemoveStudents(v ...*Student) *ProblemUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// Where appends a list predicates to the ProblemUpdate builder.
func (_u *ProblemUpdateOne) Where(ps ...predicate.Problem) *ProblemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProblemUpdateOne) Select(field string, fields ...string) *ProblemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Problem entity.
func (_u *ProblemUpdateOne) Save(ctx context.Context) (*Problem, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProblemUpdateOne) SaveX(ctx context.Context) *Problem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProblemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProblemUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := problem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Problem.title": %w`, err)}
		}
	}
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.course"`)
	}
	return nil
}

func (_u *ProblemUpdateOne) sqlSave(ctx context.Context) (_node *Problem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Problem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problem.FieldID)
		for _, f := range fields {
			if !problem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != problem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(problem.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CourseTable,
			Columns: []string{problem.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.CourseTable,
			Columns: []string{problem.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AttemptsTable,
			Columns: []string{problem.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !_u.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AttemptsTable,
			Columns: []string{problem.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AttemptsTable,
			Columns: []string{problem.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   problem.StudentsTable,
			Columns: problem.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   problem.StudentsTable,
			Columns: problem.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   problem.StudentsTable,
			Columns: problem.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Problem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
