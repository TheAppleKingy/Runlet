// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/class"
	"Runlet/internal/infrastructure/ent/course"
	"Runlet/internal/infrastructure/ent/predicate"
	"Runlet/internal/infrastructure/ent/teacher"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeacherUpdate is the builder for updating Teacher entities.
type TeacherUpdate struct {
	config
	hooks    []Hook
	mutation *TeacherMutation
}

// Where appends a list predicates to the TeacherUpdate builder.
func (_u *TeacherUpdate) Where(ps ...predicate.Teacher) *TeacherUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *TeacherUpdate) SetName(v string) *TeacherUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TeacherUpdate) SetNillableName(v *string) *TeacherUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *TeacherUpdate) SetEmail(v string) *TeacherUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *TeacherUpdate) SetNillableEmail(v *string) *TeacherUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *TeacherUpdate) SetPassword(v string) *TeacherUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *TeacherUpdate) SetNillablePassword(v *string) *TeacherUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (_u *TeacherUpdate) AddClassIDs(ids ...int) *TeacherUpdate {
	_u.mutation.AddClassIDs(ids...)
	return _u
}

// AddClasses adds the "classes" edges to the Class entity.
func (_u *TeacherUpdate) AddClasses(v ...*Class) *TeacherUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddClassIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (_u *TeacherUpdate) AddCourseIDs(ids ...int) *TeacherUpdate {
	_u.mutation.AddCourseIDs(ids...)
	return _u
}

// AddCourses adds the "courses" edges to the Course entity.
func (_u *TeacherUpdate) AddCourses(v ...*Course) *TeacherUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCourseIDs(ids...)
}

// Mutation returns the TeacherMutation object of the builder.
func (_u *TeacherUpdate) Mutation() *TeacherMutation {
	return _u.mutation
}

// ClearClasses clears all "classes" edges to the Class entity.
func (_u *TeacherUpdate) ClearClasses() *TeacherUpdate {
	_u.mutation.ClearClasses()
	return _u
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (_u *TeacherUpdate) RemoveClassIDs(ids ...int) *TeacherUpdate {
	_u.mutation.RemoveClassIDs(ids...)
	return _u
}

// RemoveClasses removes "classes" edges to Class entities.
func (_u *TeacherUpdate) RemoveClasses(v ...*Class) *TeacherUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveClassIDs(ids...)
}

// ClearCourses clears all "courses" edges to the Course entity.
func (_u *TeacherUpdate) ClearCourses() *TeacherUpdate {
	_u.mutation.ClearCourses()
	return _u
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (_u *TeacherUpdate) RemoveCourseIDs(ids ...int) *TeacherUpdate {
	_u.mutation.RemoveCourseIDs(ids...)
	return _u
}

// RemoveCourses removes "courses" edges to Course entities.
func (_u *TeacherUpdate) RemoveCourses(v ...*Course) *TeacherUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCourseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TeacherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TeacherUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TeacherUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TeacherUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TeacherUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := teacher.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Teacher.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := teacher.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Teacher.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := teacher.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Teacher.password": %w`, err)}
		}
	}
	return nil
}

func (_u *TeacherUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teacher.Table, teacher.Columns, sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(teacher.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(teacher.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(teacher.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   teacher.ClassesTable,
			Columns: teacher.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedClassesIDs(); len(nodes) > 0 && !_u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   teacher.ClassesTable,
			Columns: teacher.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   teacher.ClassesTable,
			Columns: teacher.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: teacher.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !_u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: teacher.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: teacher.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teacher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TeacherUpdateOne is the builder for updating a single Teacher entity.
type TeacherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeacherMutation
}

// SetName sets the "name" field.
func (_u *TeacherUpdateOne) SetName(v string) *TeacherUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TeacherUpdateOne) SetNillableName(v *string) *TeacherUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *TeacherUpdateOne) SetEmail(v string) *TeacherUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *TeacherUpdateOne) SetNillableEmail(v *string) *TeacherUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *TeacherUpdateOne) SetPassword(v string) *TeacherUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *TeacherUpdateOne) SetNillablePassword(v *string) *TeacherUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (_u *TeacherUpdateOne) AddClassIDs(ids ...int) *TeacherUpdateOne {
	_u.mutation.AddClassIDs(ids...)
	return _u
}

// AddClasses adds the "classes" edges to the Class entity.
func (_u *TeacherUpdateOne) AddClasses(v ...*Class) *TeacherUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddClassIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (_u *TeacherUpdateOne) AddCourseIDs(ids ...int) *TeacherUpdateOne {
	_u.mutation.AddCourseIDs(ids...)
	return _u
}

// AddCourses adds the "courses" edges to the Course entity.
func (_u *TeacherUpdateOne) AddCourses(v ...*Course) *TeacherUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCourseIDs(ids...)
}

// Mutation returns the TeacherMutation object of the builder.
func (_u *TeacherUpdateOne) Mutation() *TeacherMutation {
	return _u.mutation
}

// ClearClasses clears all "classes" edges to the Class entity.
func (_u *TeacherUpdateOne) ClearClasses() *TeacherUpdateOne {
	_u.mutation.ClearClasses()
	return _u
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (_u *TeacherUpdateOne) RemoveClassIDs(ids ...int) *TeacherUpdateOne {
	_u.mutation.RemoveClassIDs(ids...)
	return _u
}

// RemoveClasses removes "classes" edges to Class entities.
func (_u *TeacherUpdateOne) RemoveClasses(v ...*Class) *TeacherUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveClassIDs(ids...)
}

// ClearCourses clears all "courses" edges to the Course entity.
func (_u *TeacherUpdateOne) ClearCourses() *TeacherUpdateOne {
	_u.mutation.ClearCourses()
	return _u
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (_u *TeacherUpdateOne) RemoveCourseIDs(ids ...int) *TeacherUpdateOne {
	_u.mutation.RemoveCourseIDs(ids...)
	return _u
}

// RemoveCourses removes "courses" edges to Course entities.
func (_u *TeacherUpdateOne) RemoveCourses(v ...*Course) *TeacherUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCourseIDs(ids...)
}

// Where appends a list predicates to the TeacherUpdate builder.
func (_u *TeacherUpdateOne) Where(ps ...predicate.Teacher) *TeacherUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TeacherUpdateOne) Select(field string, fields ...string) *TeacherUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Teacher entity.
func (_u *TeacherUpdateOne) Save(ctx context.Context) (*Teacher, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TeacherUpdateOne) SaveX(ctx context.Context) *Teacher {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TeacherUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TeacherUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TeacherUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := teacher.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Teacher.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := teacher.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Teacher.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := teacher.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Teacher.password": %w`, err)}
		}
	}
	return nil
}

func (_u *TeacherUpdateOne) sqlSave(ctx context.Context) (_node *Teacher, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teacher.Table, teacher.Columns, sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Teacher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teacher.FieldID)
		for _, f := range fields {
			if !teacher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teacher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(teacher.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(teacher.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(teacher.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   teacher.ClassesTable,
			Columns: teacher.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedClassesIDs(); len(nodes) > 0 && !_u.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   teacher.ClassesTable,
			Columns: teacher.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   teacher.ClassesTable,
			Columns: teacher.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: teacher.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !_u.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: teacher.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: teacher.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Teacher{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teacher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
