// Code generated by ent, DO NOT EDIT.

package attempt

import (
	"Runlet/internal/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldAmount, v))
}

// Done applies equality check predicate on the "done" field. It's identical to DoneEQ.
func Done(v bool) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldDone, v))
}

// StudentID applies equality check predicate on the "student_id" field. It's identical to StudentIDEQ.
func StudentID(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldStudentID, v))
}

// ProblemID applies equality check predicate on the "problem_id" field. It's identical to ProblemIDEQ.
func ProblemID(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldProblemID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v uint) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldAmount, v))
}

// DoneEQ applies the EQ predicate on the "done" field.
func DoneEQ(v bool) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldDone, v))
}

// DoneNEQ applies the NEQ predicate on the "done" field.
func DoneNEQ(v bool) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldDone, v))
}

// StudentIDEQ applies the EQ predicate on the "student_id" field.
func StudentIDEQ(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldStudentID, v))
}

// StudentIDNEQ applies the NEQ predicate on the "student_id" field.
func StudentIDNEQ(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldStudentID, v))
}

// StudentIDIn applies the In predicate on the "student_id" field.
func StudentIDIn(vs ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldStudentID, vs...))
}

// StudentIDNotIn applies the NotIn predicate on the "student_id" field.
func StudentIDNotIn(vs ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldStudentID, vs...))
}

// ProblemIDEQ applies the EQ predicate on the "problem_id" field.
func ProblemIDEQ(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldProblemID, v))
}

// ProblemIDNEQ applies the NEQ predicate on the "problem_id" field.
func ProblemIDNEQ(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldProblemID, v))
}

// ProblemIDIn applies the In predicate on the "problem_id" field.
func ProblemIDIn(vs ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldProblemID, vs...))
}

// ProblemIDNotIn applies the NotIn predicate on the "problem_id" field.
func ProblemIDNotIn(vs ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldProblemID, vs...))
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Attempt {
	return predicate.Attempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Attempt {
	return predicate.Attempt(func(s *sql.Selector) {
		step := newStudentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProblem applies the HasEdge predicate on the "problem" edge.
func HasProblem() predicate.Attempt {
	return predicate.Attempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProblemTable, ProblemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemWith applies the HasEdge predicate on the "problem" edge with a given conditions (other predicates).
func HasProblemWith(preds ...predicate.Problem) predicate.Attempt {
	return predicate.Attempt(func(s *sql.Selector) {
		step := newProblemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.NotPredicates(p))
}
