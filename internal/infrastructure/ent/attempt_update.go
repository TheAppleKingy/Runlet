// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/attempt"
	"Runlet/internal/infrastructure/ent/predicate"
	"Runlet/internal/infrastructure/ent/problem"
	"Runlet/internal/infrastructure/ent/student"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttemptUpdate is the builder for updating Attempt entities.
type AttemptUpdate struct {
	config
	hooks    []Hook
	mutation *AttemptMutation
}

// Where appends a list predicates to the AttemptUpdate builder.
func (_u *AttemptUpdate) Where(ps ...predicate.Attempt) *AttemptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *AttemptUpdate) SetAmount(v uint) *AttemptUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *AttemptUpdate) SetNillableAmount(v *uint) *AttemptUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *AttemptUpdate) AddAmount(v int) *AttemptUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetDone sets the "done" field.
func (_u *AttemptUpdate) SetDone(v bool) *AttemptUpdate {
	_u.mutation.SetDone(v)
	return _u
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_u *AttemptUpdate) SetNillableDone(v *bool) *AttemptUpdate {
	if v != nil {
		_u.SetDone(*v)
	}
	return _u
}

// SetStudentID sets the "student_id" field.
func (_u *AttemptUpdate) SetStudentID(v int) *AttemptUpdate {
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *AttemptUpdate) SetNillableStudentID(v *int) *AttemptUpdate {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// SetProblemID sets the "problem_id" field.
func (_u *AttemptUpdate) SetProblemID(v int) *AttemptUpdate {
	_u.mutation.SetProblemID(v)
	return _u
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (_u *AttemptUpdate) SetNillableProblemID(v *int) *AttemptUpdate {
	if v != nil {
		_u.SetProblemID(*v)
	}
	return _u
}

// SetStudent sets the "student" edge to the Student entity.
func (_u *AttemptUpdate) SetStudent(v *Student) *AttemptUpdate {
	return _u.SetStudentID(v.ID)
}

// SetProblem sets the "problem" edge to the Problem entity.
func (_u *AttemptUpdate) SetProblem(v *Problem) *AttemptUpdate {
	return _u.SetProblemID(v.ID)
}

// Mutation returns the AttemptMutation object of the builder.
func (_u *AttemptUpdate) Mutation() *AttemptMutation {
	return _u.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (_u *AttemptUpdate) ClearStudent() *AttemptUpdate {
	_u.mutation.ClearStudent()
	return _u
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (_u *AttemptUpdate) ClearProblem() *AttemptUpdate {
	_u.mutation.ClearProblem()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AttemptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttemptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttemptUpdate) check() error {
	if _u.mutation.StudentCleared() && len(_u.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Attempt.student"`)
	}
	if _u.mutation.ProblemCleared() && len(_u.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Attempt.problem"`)
	}
	return nil
}

func (_u *AttemptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attempt.Table, attempt.Columns, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(attempt.FieldAmount, field.TypeUint, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(attempt.FieldAmount, field.TypeUint, value)
	}
	if value, ok := _u.mutation.Done(); ok {
		_spec.SetField(attempt.FieldDone, field.TypeBool, value)
	}
	if _u.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.StudentTable,
			Columns: []string{attempt.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.StudentTable,
			Columns: []string{attempt.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.ProblemTable,
			Columns: []string{attempt.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.ProblemTable,
			Columns: []string{attempt.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AttemptUpdateOne is the builder for updating a single Attempt entity.
type AttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttemptMutation
}

// SetAmount sets the "amount" field.
func (_u *AttemptUpdateOne) SetAmount(v uint) *AttemptUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *AttemptUpdateOne) SetNillableAmount(v *uint) *AttemptUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *AttemptUpdateOne) AddAmount(v int) *AttemptUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetDone sets the "done" field.
func (_u *AttemptUpdateOne) SetDone(v bool) *AttemptUpdateOne {
	_u.mutation.SetDone(v)
	return _u
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_u *AttemptUpdateOne) SetNillableDone(v *bool) *AttemptUpdateOne {
	if v != nil {
		_u.SetDone(*v)
	}
	return _u
}

// SetStudentID sets the "student_id" field.
func (_u *AttemptUpdateOne) SetStudentID(v int) *AttemptUpdateOne {
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *AttemptUpdateOne) SetNillableStudentID(v *int) *AttemptUpdateOne {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// SetProblemID sets the "problem_id" field.
func (_u *AttemptUpdateOne) SetProblemID(v int) *AttemptUpdateOne {
	_u.mutation.SetProblemID(v)
	return _u
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (_u *AttemptUpdateOne) SetNillableProblemID(v *int) *AttemptUpdateOne {
	if v != nil {
		_u.SetProblemID(*v)
	}
	return _u
}

// SetStudent sets the "student" edge to the Student entity.
func (_u *AttemptUpdateOne) SetStudent(v *Student) *AttemptUpdateOne {
	return _u.SetStudentID(v.ID)
}

// SetProblem sets the "problem" edge to the Problem entity.
func (_u *AttemptUpdateOne) SetProblem(v *Problem) *AttemptUpdateOne {
	return _u.SetProblemID(v.ID)
}

// Mutation returns the AttemptMutation object of the builder.
func (_u *AttemptUpdateOne) Mutation() *AttemptMutation {
	return _u.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (_u *AttemptUpdateOne) ClearStudent() *AttemptUpdateOne {
	_u.mutation.ClearStudent()
	return _u
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (_u *AttemptUpdateOne) ClearProblem() *AttemptUpdateOne {
	_u.mutation.ClearProblem()
	return _u
}

// Where appends a list predicates to the AttemptUpdate builder.
func (_u *AttemptUpdateOne) Where(ps ...predicate.Attempt) *AttemptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AttemptUpdateOne) Select(field string, fields ...string) *AttemptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Attempt entity.
func (_u *AttemptUpdateOne) Save(ctx context.Context) (*Attempt, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttemptUpdateOne) SaveX(ctx context.Context) *Attempt {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttemptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttemptUpdateOne) check() error {
	if _u.mutation.StudentCleared() && len(_u.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Attempt.student"`)
	}
	if _u.mutation.ProblemCleared() && len(_u.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Attempt.problem"`)
	}
	return nil
}

func (_u *AttemptUpdateOne) sqlSave(ctx context.Context) (_node *Attempt, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attempt.Table, attempt.Columns, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attempt.FieldID)
		for _, f := range fields {
			if !attempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(attempt.FieldAmount, field.TypeUint, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(attempt.FieldAmount, field.TypeUint, value)
	}
	if value, ok := _u.mutation.Done(); ok {
		_spec.SetField(attempt.FieldDone, field.TypeBool, value)
	}
	if _u.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.StudentTable,
			Columns: []string{attempt.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.StudentTable,
			Columns: []string{attempt.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.ProblemTable,
			Columns: []string{attempt.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.ProblemTable,
			Columns: []string{attempt.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attempt{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
