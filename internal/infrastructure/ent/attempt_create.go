// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Runlet/internal/infrastructure/ent/attempt"
	"Runlet/internal/infrastructure/ent/problem"
	"Runlet/internal/infrastructure/ent/student"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttemptCreate is the builder for creating a Attempt entity.
type AttemptCreate struct {
	config
	mutation *AttemptMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (_c *AttemptCreate) SetAmount(v uint) *AttemptCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_c *AttemptCreate) SetNillableAmount(v *uint) *AttemptCreate {
	if v != nil {
		_c.SetAmount(*v)
	}
	return _c
}

// SetDone sets the "done" field.
func (_c *AttemptCreate) SetDone(v bool) *AttemptCreate {
	_c.mutation.SetDone(v)
	return _c
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_c *AttemptCreate) SetNillableDone(v *bool) *AttemptCreate {
	if v != nil {
		_c.SetDone(*v)
	}
	return _c
}

// SetStudentID sets the "student_id" field.
func (_c *AttemptCreate) SetStudentID(v int) *AttemptCreate {
	_c.mutation.SetStudentID(v)
	return _c
}

// SetProblemID sets the "problem_id" field.
func (_c *AttemptCreate) SetProblemID(v int) *AttemptCreate {
	_c.mutation.SetProblemID(v)
	return _c
}

// SetStudent sets the "student" edge to the Student entity.
func (_c *AttemptCreate) SetStudent(v *Student) *AttemptCreate {
	return _c.SetStudentID(v.ID)
}

// SetProblem sets the "problem" edge to the Problem entity.
func (_c *AttemptCreate) SetProblem(v *Problem) *AttemptCreate {
	return _c.SetProblemID(v.ID)
}

// Mutation returns the AttemptMutation object of the builder.
func (_c *AttemptCreate) Mutation() *AttemptMutation {
	return _c.mutation
}

// Save creates the Attempt in the database.
func (_c *AttemptCreate) Save(ctx context.Context) (*Attempt, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AttemptCreate) SaveX(ctx context.Context) *Attempt {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttemptCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttemptCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AttemptCreate) defaults() {
	if _, ok := _c.mutation.Amount(); !ok {
		v := attempt.DefaultAmount
		_c.mutation.SetAmount(v)
	}
	if _, ok := _c.mutation.Done(); !ok {
		v := attempt.DefaultDone
		_c.mutation.SetDone(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AttemptCreate) check() error {
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Attempt.amount"`)}
	}
	if _, ok := _c.mutation.Done(); !ok {
		return &ValidationError{Name: "done", err: errors.New(`ent: missing required field "Attempt.done"`)}
	}
	if _, ok := _c.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required field "Attempt.student_id"`)}
	}
	if _, ok := _c.mutation.ProblemID(); !ok {
		return &ValidationError{Name: "problem_id", err: errors.New(`ent: missing required field "Attempt.problem_id"`)}
	}
	if len(_c.mutation.StudentIDs()) == 0 {
		return &ValidationError{Name: "student", err: errors.New(`ent: missing required edge "Attempt.student"`)}
	}
	if len(_c.mutation.ProblemIDs()) == 0 {
		return &ValidationError{Name: "problem", err: errors.New(`ent: missing required edge "Attempt.problem"`)}
	}
	return nil
}

func (_c *AttemptCreate) sqlSave(ctx context.Context) (*Attempt, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AttemptCreate) createSpec() (*Attempt, *sqlgraph.CreateSpec) {
	var (
		_node = &Attempt{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(attempt.Table, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(attempt.FieldAmount, field.TypeUint, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.Done(); ok {
		_spec.SetField(attempt.FieldDone, field.TypeBool, value)
		_node.Done = value
	}
	if nodes := _c.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.StudentTable,
			Columns: []string{attempt.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StudentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attempt.ProblemTable,
			Columns: []string{attempt.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProblemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttemptCreateBulk is the builder for creating many Attempt entities in bulk.
type AttemptCreateBulk struct {
	config
	err      error
	builders []*AttemptCreate
}

// Save creates the Attempt entities in the database.
func (_c *AttemptCreateBulk) Save(ctx context.Context) ([]*Attempt, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Attempt, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttemptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AttemptCreateBulk) SaveX(ctx context.Context) []*Attempt {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttemptCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttemptCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
